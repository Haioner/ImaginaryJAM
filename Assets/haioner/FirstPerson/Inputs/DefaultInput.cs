//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/haioner/FirstPerson/Inputs/DefaultInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @DefaultInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""8a40676f-cc96-4b8b-b33a-25a1e56e92bb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3de11528-33a7-480c-bd3d-4cfe62275a2a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""169158fe-a93d-46bf-a79f-7c5a8b1234f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""7b77a438-36fd-4c59-b856-b8e3571ec96f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CrouchRelease"",
                    ""type"": ""Button"",
                    ""id"": ""5401abca-8d5d-4336-86b0-d9ce1a1086a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Prone"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d1783b34-7203-46e8-9b79-34447bc48482"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b31e573d-bbbc-4363-9849-0e4462dbaeaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""31d43a9b-97df-40b5-9aca-e659f825c73e"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""97b53a35-2272-46b4-ac79-9b1d8b3332d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eda4b7d3-104c-47b6-978a-428f44f5d559"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6adb8585-8c57-45ec-8b2c-05fa9803c000"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a71f0aea-e58c-4881-91b5-04c60305aed6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""5e93b60b-9571-48d2-a538-8772307b13e9"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3955f27e-079d-49f9-beee-40209676e1e9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa223732-edd0-49a3-aab0-ac74a5fc0bb9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""85d330f8-c6dd-4654-8251-4972a81914a6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0e4e0397-ac14-4465-943a-e64bcddea80c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e1c14255-caaf-48c6-ab79-11ae3c848eb5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""845f2c9b-7b4d-45c7-ac76-6f9bd7d33e1a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92f633fd-504a-472a-b926-8c3203461cf3"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e04fcf4-a4ea-4b2f-9507-099e69e47d89"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dda0038e-1fae-4b21-ad31-c9259a61d83d"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CrouchRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""View"",
            ""id"": ""f97e5f56-bfd1-475b-983a-ded73d5ed277"",
            ""actions"": [
                {
                    ""name"": ""CameraView"",
                    ""type"": ""PassThrough"",
                    ""id"": ""48470ef3-e1e6-49ca-a8f5-a2c42eadd9a5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomScrollDown"",
                    ""type"": ""Value"",
                    ""id"": ""2cb0a12f-8ce0-454f-a6c2-19fa7c00e983"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomScrollUp"",
                    ""type"": ""Value"",
                    ""id"": ""202ea396-aa9e-4c26-99f3-c3151f4e019b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""044b39d2-f437-442f-9200-4a4402d707c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a691420-fb97-4cfe-ab5a-f025ec8d8436"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7d4cc0f-9ed6-492b-bf58-4fdefc4dac69"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""663dc44f-651d-40cb-824c-981b6d356bad"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomScrollUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3859e55-33e4-49ca-8a44-b074a578e5c6"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomScrollDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grab"",
            ""id"": ""9ee75dba-4329-4a65-90ac-5991cc4fe37a"",
            ""actions"": [
                {
                    ""name"": ""RotateItem"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8663914c-5369-4b31-bfcc-dc61b9cbc646"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HoldItem"",
                    ""type"": ""Button"",
                    ""id"": ""febc951c-4b2b-4322-a466-5a013b9f88bc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowItem"",
                    ""type"": ""Button"",
                    ""id"": ""08b6e1db-910b-423b-8aa6-b9329e239a71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollItem"",
                    ""type"": ""PassThrough"",
                    ""id"": ""94913e2e-803f-46cc-8dd4-d78e6cbfb1f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4bdd8a9-0ebc-47b7-8baf-852c4e6d2230"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd1b4e6a-0a5d-4a65-8a1a-4958dfa80fb3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0318f01d-9f9e-40c3-b90c-52c96c8e4f27"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HoldItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96a21674-f4ab-47fe-b233-87e7c1b74e85"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9ad63db-f143-4fbd-b21f-f5a10253024a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Flashlight"",
            ""id"": ""96760602-fb21-417a-985d-7d61dc3c9959"",
            ""actions"": [
                {
                    ""name"": ""LightSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""574fbc59-9a8f-4abe-bcc1-5bf5f8fa5585"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0f39b77-0ce5-4259-8ee9-e2383611ff86"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactables"",
            ""id"": ""a71ad35d-8ac8-4b2b-bae0-f4182338b415"",
            ""actions"": [
                {
                    ""name"": ""InteractButton"",
                    ""type"": ""Button"",
                    ""id"": ""bb149dae-dab6-4fce-a928-f88616cb624e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0adf3ba0-eed2-4dfa-9673-f5878fc6ceee"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
        m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
        m_Character_Crouch = m_Character.FindAction("Crouch", throwIfNotFound: true);
        m_Character_CrouchRelease = m_Character.FindAction("CrouchRelease", throwIfNotFound: true);
        m_Character_Prone = m_Character.FindAction("Prone", throwIfNotFound: true);
        m_Character_Sprint = m_Character.FindAction("Sprint", throwIfNotFound: true);
        // View
        m_View = asset.FindActionMap("View", throwIfNotFound: true);
        m_View_CameraView = m_View.FindAction("CameraView", throwIfNotFound: true);
        m_View_ZoomScrollDown = m_View.FindAction("ZoomScrollDown", throwIfNotFound: true);
        m_View_ZoomScrollUp = m_View.FindAction("ZoomScrollUp", throwIfNotFound: true);
        m_View_Zoom = m_View.FindAction("Zoom", throwIfNotFound: true);
        // Grab
        m_Grab = asset.FindActionMap("Grab", throwIfNotFound: true);
        m_Grab_RotateItem = m_Grab.FindAction("RotateItem", throwIfNotFound: true);
        m_Grab_HoldItem = m_Grab.FindAction("HoldItem", throwIfNotFound: true);
        m_Grab_ThrowItem = m_Grab.FindAction("ThrowItem", throwIfNotFound: true);
        m_Grab_ScrollItem = m_Grab.FindAction("ScrollItem", throwIfNotFound: true);
        // Flashlight
        m_Flashlight = asset.FindActionMap("Flashlight", throwIfNotFound: true);
        m_Flashlight_LightSwitch = m_Flashlight.FindAction("LightSwitch", throwIfNotFound: true);
        // Interactables
        m_Interactables = asset.FindActionMap("Interactables", throwIfNotFound: true);
        m_Interactables_InteractButton = m_Interactables.FindAction("InteractButton", throwIfNotFound: true);
    }

    ~@DefaultInput()
    {
        Debug.Assert(!m_Character.enabled, "This will cause a leak and performance issues, DefaultInput.Character.Disable() has not been called.");
        Debug.Assert(!m_View.enabled, "This will cause a leak and performance issues, DefaultInput.View.Disable() has not been called.");
        Debug.Assert(!m_Grab.enabled, "This will cause a leak and performance issues, DefaultInput.Grab.Disable() has not been called.");
        Debug.Assert(!m_Flashlight.enabled, "This will cause a leak and performance issues, DefaultInput.Flashlight.Disable() has not been called.");
        Debug.Assert(!m_Interactables.enabled, "This will cause a leak and performance issues, DefaultInput.Interactables.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
    private readonly InputAction m_Character_Movement;
    private readonly InputAction m_Character_Jump;
    private readonly InputAction m_Character_Crouch;
    private readonly InputAction m_Character_CrouchRelease;
    private readonly InputAction m_Character_Prone;
    private readonly InputAction m_Character_Sprint;
    public struct CharacterActions
    {
        private @DefaultInput m_Wrapper;
        public CharacterActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Character_Movement;
        public InputAction @Jump => m_Wrapper.m_Character_Jump;
        public InputAction @Crouch => m_Wrapper.m_Character_Crouch;
        public InputAction @CrouchRelease => m_Wrapper.m_Character_CrouchRelease;
        public InputAction @Prone => m_Wrapper.m_Character_Prone;
        public InputAction @Sprint => m_Wrapper.m_Character_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @CrouchRelease.started += instance.OnCrouchRelease;
            @CrouchRelease.performed += instance.OnCrouchRelease;
            @CrouchRelease.canceled += instance.OnCrouchRelease;
            @Prone.started += instance.OnProne;
            @Prone.performed += instance.OnProne;
            @Prone.canceled += instance.OnProne;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(ICharacterActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @CrouchRelease.started -= instance.OnCrouchRelease;
            @CrouchRelease.performed -= instance.OnCrouchRelease;
            @CrouchRelease.canceled -= instance.OnCrouchRelease;
            @Prone.started -= instance.OnProne;
            @Prone.performed -= instance.OnProne;
            @Prone.canceled -= instance.OnProne;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterActions @Character => new CharacterActions(this);

    // View
    private readonly InputActionMap m_View;
    private List<IViewActions> m_ViewActionsCallbackInterfaces = new List<IViewActions>();
    private readonly InputAction m_View_CameraView;
    private readonly InputAction m_View_ZoomScrollDown;
    private readonly InputAction m_View_ZoomScrollUp;
    private readonly InputAction m_View_Zoom;
    public struct ViewActions
    {
        private @DefaultInput m_Wrapper;
        public ViewActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraView => m_Wrapper.m_View_CameraView;
        public InputAction @ZoomScrollDown => m_Wrapper.m_View_ZoomScrollDown;
        public InputAction @ZoomScrollUp => m_Wrapper.m_View_ZoomScrollUp;
        public InputAction @Zoom => m_Wrapper.m_View_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_View; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ViewActions set) { return set.Get(); }
        public void AddCallbacks(IViewActions instance)
        {
            if (instance == null || m_Wrapper.m_ViewActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ViewActionsCallbackInterfaces.Add(instance);
            @CameraView.started += instance.OnCameraView;
            @CameraView.performed += instance.OnCameraView;
            @CameraView.canceled += instance.OnCameraView;
            @ZoomScrollDown.started += instance.OnZoomScrollDown;
            @ZoomScrollDown.performed += instance.OnZoomScrollDown;
            @ZoomScrollDown.canceled += instance.OnZoomScrollDown;
            @ZoomScrollUp.started += instance.OnZoomScrollUp;
            @ZoomScrollUp.performed += instance.OnZoomScrollUp;
            @ZoomScrollUp.canceled += instance.OnZoomScrollUp;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(IViewActions instance)
        {
            @CameraView.started -= instance.OnCameraView;
            @CameraView.performed -= instance.OnCameraView;
            @CameraView.canceled -= instance.OnCameraView;
            @ZoomScrollDown.started -= instance.OnZoomScrollDown;
            @ZoomScrollDown.performed -= instance.OnZoomScrollDown;
            @ZoomScrollDown.canceled -= instance.OnZoomScrollDown;
            @ZoomScrollUp.started -= instance.OnZoomScrollUp;
            @ZoomScrollUp.performed -= instance.OnZoomScrollUp;
            @ZoomScrollUp.canceled -= instance.OnZoomScrollUp;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(IViewActions instance)
        {
            if (m_Wrapper.m_ViewActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IViewActions instance)
        {
            foreach (var item in m_Wrapper.m_ViewActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ViewActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ViewActions @View => new ViewActions(this);

    // Grab
    private readonly InputActionMap m_Grab;
    private List<IGrabActions> m_GrabActionsCallbackInterfaces = new List<IGrabActions>();
    private readonly InputAction m_Grab_RotateItem;
    private readonly InputAction m_Grab_HoldItem;
    private readonly InputAction m_Grab_ThrowItem;
    private readonly InputAction m_Grab_ScrollItem;
    public struct GrabActions
    {
        private @DefaultInput m_Wrapper;
        public GrabActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateItem => m_Wrapper.m_Grab_RotateItem;
        public InputAction @HoldItem => m_Wrapper.m_Grab_HoldItem;
        public InputAction @ThrowItem => m_Wrapper.m_Grab_ThrowItem;
        public InputAction @ScrollItem => m_Wrapper.m_Grab_ScrollItem;
        public InputActionMap Get() { return m_Wrapper.m_Grab; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrabActions set) { return set.Get(); }
        public void AddCallbacks(IGrabActions instance)
        {
            if (instance == null || m_Wrapper.m_GrabActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GrabActionsCallbackInterfaces.Add(instance);
            @RotateItem.started += instance.OnRotateItem;
            @RotateItem.performed += instance.OnRotateItem;
            @RotateItem.canceled += instance.OnRotateItem;
            @HoldItem.started += instance.OnHoldItem;
            @HoldItem.performed += instance.OnHoldItem;
            @HoldItem.canceled += instance.OnHoldItem;
            @ThrowItem.started += instance.OnThrowItem;
            @ThrowItem.performed += instance.OnThrowItem;
            @ThrowItem.canceled += instance.OnThrowItem;
            @ScrollItem.started += instance.OnScrollItem;
            @ScrollItem.performed += instance.OnScrollItem;
            @ScrollItem.canceled += instance.OnScrollItem;
        }

        private void UnregisterCallbacks(IGrabActions instance)
        {
            @RotateItem.started -= instance.OnRotateItem;
            @RotateItem.performed -= instance.OnRotateItem;
            @RotateItem.canceled -= instance.OnRotateItem;
            @HoldItem.started -= instance.OnHoldItem;
            @HoldItem.performed -= instance.OnHoldItem;
            @HoldItem.canceled -= instance.OnHoldItem;
            @ThrowItem.started -= instance.OnThrowItem;
            @ThrowItem.performed -= instance.OnThrowItem;
            @ThrowItem.canceled -= instance.OnThrowItem;
            @ScrollItem.started -= instance.OnScrollItem;
            @ScrollItem.performed -= instance.OnScrollItem;
            @ScrollItem.canceled -= instance.OnScrollItem;
        }

        public void RemoveCallbacks(IGrabActions instance)
        {
            if (m_Wrapper.m_GrabActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGrabActions instance)
        {
            foreach (var item in m_Wrapper.m_GrabActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GrabActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GrabActions @Grab => new GrabActions(this);

    // Flashlight
    private readonly InputActionMap m_Flashlight;
    private List<IFlashlightActions> m_FlashlightActionsCallbackInterfaces = new List<IFlashlightActions>();
    private readonly InputAction m_Flashlight_LightSwitch;
    public struct FlashlightActions
    {
        private @DefaultInput m_Wrapper;
        public FlashlightActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LightSwitch => m_Wrapper.m_Flashlight_LightSwitch;
        public InputActionMap Get() { return m_Wrapper.m_Flashlight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlashlightActions set) { return set.Get(); }
        public void AddCallbacks(IFlashlightActions instance)
        {
            if (instance == null || m_Wrapper.m_FlashlightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlashlightActionsCallbackInterfaces.Add(instance);
            @LightSwitch.started += instance.OnLightSwitch;
            @LightSwitch.performed += instance.OnLightSwitch;
            @LightSwitch.canceled += instance.OnLightSwitch;
        }

        private void UnregisterCallbacks(IFlashlightActions instance)
        {
            @LightSwitch.started -= instance.OnLightSwitch;
            @LightSwitch.performed -= instance.OnLightSwitch;
            @LightSwitch.canceled -= instance.OnLightSwitch;
        }

        public void RemoveCallbacks(IFlashlightActions instance)
        {
            if (m_Wrapper.m_FlashlightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlashlightActions instance)
        {
            foreach (var item in m_Wrapper.m_FlashlightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlashlightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlashlightActions @Flashlight => new FlashlightActions(this);

    // Interactables
    private readonly InputActionMap m_Interactables;
    private List<IInteractablesActions> m_InteractablesActionsCallbackInterfaces = new List<IInteractablesActions>();
    private readonly InputAction m_Interactables_InteractButton;
    public struct InteractablesActions
    {
        private @DefaultInput m_Wrapper;
        public InteractablesActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteractButton => m_Wrapper.m_Interactables_InteractButton;
        public InputActionMap Get() { return m_Wrapper.m_Interactables; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractablesActions set) { return set.Get(); }
        public void AddCallbacks(IInteractablesActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractablesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractablesActionsCallbackInterfaces.Add(instance);
            @InteractButton.started += instance.OnInteractButton;
            @InteractButton.performed += instance.OnInteractButton;
            @InteractButton.canceled += instance.OnInteractButton;
        }

        private void UnregisterCallbacks(IInteractablesActions instance)
        {
            @InteractButton.started -= instance.OnInteractButton;
            @InteractButton.performed -= instance.OnInteractButton;
            @InteractButton.canceled -= instance.OnInteractButton;
        }

        public void RemoveCallbacks(IInteractablesActions instance)
        {
            if (m_Wrapper.m_InteractablesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractablesActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractablesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractablesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractablesActions @Interactables => new InteractablesActions(this);
    public interface ICharacterActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnCrouchRelease(InputAction.CallbackContext context);
        void OnProne(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IViewActions
    {
        void OnCameraView(InputAction.CallbackContext context);
        void OnZoomScrollDown(InputAction.CallbackContext context);
        void OnZoomScrollUp(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IGrabActions
    {
        void OnRotateItem(InputAction.CallbackContext context);
        void OnHoldItem(InputAction.CallbackContext context);
        void OnThrowItem(InputAction.CallbackContext context);
        void OnScrollItem(InputAction.CallbackContext context);
    }
    public interface IFlashlightActions
    {
        void OnLightSwitch(InputAction.CallbackContext context);
    }
    public interface IInteractablesActions
    {
        void OnInteractButton(InputAction.CallbackContext context);
    }
}
